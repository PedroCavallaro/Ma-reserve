// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String        @id @default(uuid())
  name        String
  pictures    String[]
  max_guests  Int
  highlights  String[]
  latitude    String
  longitude   String
  Reservation Reservation[]
  Menu        Menu[]
  Comments    Comments[]
}

model Menu {
  id           String     @id @default(uuid())
  description  String
  pictures     String[]
  price        Float
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model Reservation {
  id           String     @id @default(uuid())
  guests       Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  User         User       @relation(fields: [userId], references: [id])
  userId       String
  Schedule     Schedule   @relation(fields: [scheduleId], references: [id])
  scheduleId   String
}

model Schedule {
  id          String        @id @default(uuid())
  day         DateTime
  time        String
  isReserved  Boolean
  Reservation Reservation[]
}

model Comments {
  id           String     @id @default(uuid())
  comment      String
  date         DateTime
  User         User       @relation(fields: [userId], references: [id])
  userId       String
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Reservation   Reservation[]
  Comments      Comments[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
